## BUILDING AI - DEALING WITH UNCERTAINTY - NAIVE BAYES CLASSIFIER
## Exercise 10: Naive Bayes classifier
## Intermediate
def flip(n):
    odds = 1.0         # start with 50% chance of the magic coin, which is the same as odds = 1:1
    r = 2              #likelihood ratio

    for i in range(n):
        # edit here to update the odds
        odds = odds * r
    print(odds)

n = 3
flip(n)


## Advanced
import numpy as np

p1 = [1/6, 1/6, 1/6, 1/6, 1/6, 1/6]   # normal
p2 = [0.1, 0.1, 0.1, 0.1, 0.1, 0.5]   # loaded

def roll(loaded):
    if loaded:
        print("rolling a loaded die")
        p = p2
    else:
        print("rolling a normal die")
        p = p1

    # roll the dice 10 times
    # add 1 to get dice rolls from 1 to 6 instead of 0 to 5
    sequence = np.random.choice(6, size=10, p=p) + 1 
    for roll in sequence:
        print("rolled %d" % roll)
        
    return sequence

def bayes(sequence):
    odds = 1.0           # start with odds 1:1
    r_6 = p2[5] / p1[5]
    r_not6 = (sum(p2) - p2[5]) / (sum(p1) - p1[5])

    for roll in sequence:
        # edit here to update the odds
        if roll == 6:
            odds = odds * r_6
        else:
            odds = odds * r_not6
    if odds > 1:
        return True
    else:
        return False

sequence = roll(True)
if bayes(sequence):
    print("I think loaded")
else:
    print("I think normal")
